int "[1-9][0-9]*|0"
float "[0-9]+\\.[0-9]+"
string "\"[^\"]*\""
char "'[^']'"
id "[a-zA-Z_][a-zA-Z0-9_]*"
operator "[\\+\\-\\*/%&|^<>!$=\\.]+"
bracket "\\(|\\)|\\[|\\]"
comma ",|\\|"
.ignore "[ \t\r\n]+"

---

<program> ::= { <expr> | <fun> } ;

<instructions> ::= "(" { <expr> | <fun> } ")"
                 | <fun>
                 ;

<expr> ::= <casted> { <operator> } ( <expr> | <operator> | <fun> )
         | <casted>
         ;

<casted> ::= <int>
           | <float>
           | <string>
           | <char>
           | <id>
           | <instructions>
           | <structure>
           | <list>
           | <comprehensive_list>
           ;

<name> ::= <id> | "operator" <operator> ;

<fun> ::= <name> [ [ { <expr> "," } ] <expr> ] ;

<comprehensive_list> ::= "[" <expr> "|" <id> "in" <expr> [ "|" <expr> [ "|" <expr> ] ] "]" ;

<structure_if> ::= "if" <expr> <instructions> [ "else" <instructions> ] ;

<structure_while> ::= "while" <expr> <instructions> ;

<structure_loop> ::= "loop" <instructions> ;

<structure_for> ::= "for" <id> "in" <expr> <instructions> ;

<list> ::= "[" [ { <expr> } ] "]" ;

<check_all_type> ::= "[" [ { <expr> } ] "]" ;

<structure_lambda> ::= [ { [ "&" ] <name> } ] "=>" <instructions> ;

<structure_function> ::= <name> "=" <structure_lambda> ;

<structure_typed_lambda> ::= <check_all_type> ":=" <structure_lambda> ;

<structure_typed_function> ::= <name> "<-" <structure_typed_lambda> ;

<structure> ::= <structure_if>
              | <structure_while>
              | <structure_loop>
              | <structure_for>
              | <structure_function>
              | <structure_lambda>
              | <structure_typed_function>
              | <structure_typed_lambda>
              ;